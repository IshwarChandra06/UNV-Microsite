package com.eikona.tech.service.impl.model;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.eikona.tech.constants.ApplicationConstants;
import com.eikona.tech.entity.DailyReport;
import com.eikona.tech.entity.Employee;
import com.eikona.tech.entity.Organization;
import com.eikona.tech.entity.Transaction;
import com.eikona.tech.repository.DailyAttendanceRepository;
import com.eikona.tech.repository.EmployeeRepository;
import com.eikona.tech.repository.OrganizationRepository;
import com.eikona.tech.util.CalendarUtil;

@Service
@EnableScheduling
public class DailyAttendanceFromEventServiceImpl {

	@Autowired
	private DailyAttendanceRepository dailyAttendanceRepository;

	@Autowired
	private OrganizationRepository organizationRepository;
	
	@Autowired
	private EmployeeRepository employeeRepository;
	
	@Autowired
	private CalendarUtil calendarUtil;
	
	@Value("${dailyreport.autogenerate.enabled}")
	private String enableGenerate;
	
	@Scheduled(cron ="0 0 9 * * *")
	public void autoGenerateDailyReport() {
		
		if("Yes".equalsIgnoreCase(enableGenerate)) {
			SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date yesterday=calendarUtil.getPreviousDate(new Date(), -1, 0, 0,0);
			String date=inputFormat.format(yesterday);
			List<Organization> orgList=organizationRepository.findAllByIsDeletedFalse();
			for(Organization org:orgList) {
				generateNotPunchDailyAttendance(date, date, org.getName());
			}
		}
	}
	
	public void generateNotPunchDailyAttendance(String sDate, String eDate, String organization) {
		
		try {
			
			SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			sDate = format.format(inputFormat.parse(sDate));
			eDate = format.format(inputFormat.parse(eDate));
			
			Date startDate = calendarUtil.getConvertedDate(format.parse(sDate), 00, 00, 00);
			Date endDate = calendarUtil.getConvertedDate(format.parse(eDate), 23, 59, 59);
			
			List<String> dailyReportEmpIdList = dailyAttendanceRepository.findByDateAndOrganizationCustom(startDate, endDate, organization);
			
			if(dailyReportEmpIdList.isEmpty())
				dailyReportEmpIdList.add(" ");
			
			
			List<Employee> absentEmployeeList = employeeRepository.findByEmpIdAndIsDeletedFalseCustom(dailyReportEmpIdList, organization);
			List<DailyReport> dailyReportList = new ArrayList<>();
			for(Employee employee : absentEmployeeList) {
				
				DailyReport dailyReport = new DailyReport();
				dailyReport.setEmpId(employee.getEmpId().trim());
				dailyReport.setDateStr(sDate);
				dailyReport.setDate(startDate);
				dailyReport.setEmployeeName(employee.getName());
				dailyReport.setOrganization((null == employee.getOrganization()?"":employee.getOrganization().getName()));
				dailyReport.setDepartment((null == employee.getDepartment()?"":employee.getDepartment().getName()));
				dailyReport.setDesignation((null == employee.getDesignation()?"":employee.getDesignation().getName()));
				dailyReport.setMobile(employee.getMobile());
				dailyReport.setGrade(employee.getGrade());
				dailyReport.setCompany(employee.getCompany());
				dailyReport.setEmployeeType("Employee");
				dailyReport.setUserType("Employee");
				dailyReport.setPunchInDevice("Not Punched");
				dailyReport.setAttendanceStatus("-");
				dailyReport.setMissedOutPunch(false);
				dailyReportList.add(dailyReport);
				
			}
			
			dailyAttendanceRepository.saveAll(dailyReportList);
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}

	public void generateDailyAttendance(Transaction transaction) {

		try {
			DailyReport dailyReport = null;
			SimpleDateFormat dateformat=new SimpleDateFormat(ApplicationConstants.DATE_FORMAT_OF_US);
			
			if(transaction.getPunchDate().getHours() < 9) {
				Calendar currDateCal = Calendar.getInstance();
				currDateCal.setTime(transaction.getPunchDate());
				currDateCal.add(Calendar.DAY_OF_MONTH, -1);
				Date currDate = currDateCal.getTime();
				
				 dailyReport = dailyAttendanceRepository.findByEmpIdAndDateAndOrganizationAndPunchInDevice(transaction.getEmpId().trim(),
						 dateformat.parse(dateformat.format(currDate)), transaction.getOrganization(), "Punched");
				 
				 if(null!=dailyReport) {
					 
						if(Integer.parseInt(dailyReport.getEmpInTime().split(":")[0]) >= 20) 
							setEmployeeOutPunchDetails(transaction, dailyReport);
						
						else 
							 dailyReport = setDailyReportFromEvents(transaction, dateformat);
					}
				 else 
					 dailyReport = setDailyReportFromEvents(transaction, dateformat);
				
			}else 
				 dailyReport = setDailyReportFromEvents(transaction, dateformat);
					
			dailyAttendanceRepository.save(dailyReport);
			
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	private DailyReport setDailyReportFromEvents(Transaction transaction, SimpleDateFormat dateformat)
			throws ParseException {
		DailyReport dailyReport = dailyAttendanceRepository.findByEmpIdAndDateAndOrganization(transaction.getEmpId(),dateformat.parse(transaction.getPunchDateStr()),transaction.getOrganization());
			
		if(null==dailyReport) {
			dailyReport = new DailyReport();
			setEmployeeInPunchDetails(transaction, dailyReport, dateformat);
		}else if(null!=dailyReport && "Not Punched".equalsIgnoreCase(dailyReport.getPunchInDevice()))
			setEmployeeInPunchDetails(transaction, dailyReport, dateformat);
		else 
			setEmployeeOutPunchDetails(transaction, dailyReport);
		return dailyReport;
	}
	
	
	private void setEmployeeInPunchDetails(Transaction transaction, DailyReport dailyReport,
			SimpleDateFormat dateformat) throws ParseException {
		dailyReport.setEmpId(transaction.getEmpId().trim());
		dailyReport.setDateStr(transaction.getPunchDateStr());
		dailyReport.setDate(dateformat.parse(transaction.getPunchDateStr()));
		dailyReport.setEmployeeName(transaction.getName());
		dailyReport.setCompany(transaction.getCompany());
		dailyReport.setOrganization(transaction.getOrganization());
		dailyReport.setDepartment(transaction.getDepartment());
		dailyReport.setGrade(transaction.getGrade());
		dailyReport.setMobile(transaction.getMobile());
		dailyReport.setDesignation(transaction.getDesignation());
		dailyReport.setEmployeeType("Employee");
		dailyReport.setUserType("Employee");
		dailyReport.setShift("General");
		dailyReport.setShiftInTime("08:30:00");
		dailyReport.setShiftOutTime("17:00:00");
		dailyReport.setMissedOutPunch(true);
		dailyReport.setEmpInTime(transaction.getPunchTimeStr());
		dailyReport.setEmpInTemp(transaction.getTemperature());
		dailyReport.setEmpInMask(transaction.getWearingMask());
		dailyReport.setEmpInAccessType(transaction.getAccessType());
		dailyReport.setEmpInLocation(transaction.getDeviceName());
		dailyReport.setAttendanceStatus("Present");
		dailyReport.setPunchInDevice("Punched");
		String city = "Bokaro";
		if(transaction.getOrganization().contains("NMDC"))
			city = "Nagarnar";
		dailyReport.setShiftInTime("09:00:00");
		dailyReport.setShiftOutTime("18:00:00");
		
		int hour = Integer.parseInt(transaction.getPunchTimeStr().split(":")[0]);
		if(hour <= 7) {
				dailyReport.setShift("1st Shift"); //5:30 to 13:00
				dailyReport.setShiftInTime("06:00:00"); 
				dailyReport.setShiftOutTime("14:00:00");
		}
		
		if(hour >= 12) {
				dailyReport.setShift("2nd Shift"); //13:30 to 20:30
				dailyReport.setShiftInTime("14:00:00");
				dailyReport.setShiftOutTime("22:00:00");
		}
		
		if(hour >= 20) {
			dailyReport.setShift("3rd Shift"); //21:30 to 4:30 9to 5:30 
			dailyReport.setShiftInTime("22:00:00");
			dailyReport.setShiftOutTime("06:00:00");
		 }
		
		dailyReport.setCity(city);

		LocalTime shiftIn = LocalTime.parse(dailyReport.getShiftInTime());
		LocalTime empIn = LocalTime.parse(dailyReport.getEmpInTime().replace("'", ""));

		Long lateComing = shiftIn.until(empIn, ChronoUnit.MINUTES);
		Long earlyComing = empIn.until(shiftIn, ChronoUnit.MINUTES);

		if (earlyComing > 0)
			dailyReport.setEarlyComing(earlyComing);

		if (lateComing > 0)
			dailyReport.setLateComing(lateComing);
		
		dailyReport.setCity(city);
	}
	private void setEmployeeOutPunchDetails(Transaction transaction, DailyReport dailyReport) {
		SimpleDateFormat dateformat=new SimpleDateFormat(ApplicationConstants.DATE_FORMAT_OF_US);
		SimpleDateFormat dateTimeformat=new SimpleDateFormat(ApplicationConstants.DATE_TIME_FORMAT_OF_US);
		String inTimeFromDailyReport=dateformat.format(dailyReport.getDate())+" "+dailyReport.getEmpInTime();
		String outTimeFromDailyReport=dateformat.format(dailyReport.getDate())+" "+dailyReport.getEmpOutTime();
		try {
			
			if(transaction.getPunchDate().before(dateTimeformat.parse(inTimeFromDailyReport))) {

				if(null == dailyReport.getEmpOutTime()) {
					dailyReport.setEmpOutTime(dailyReport.getEmpInTime());
					dailyReport.setEmpOutTemp(dailyReport.getEmpInTemp());
					dailyReport.setEmpOutMask(dailyReport.getEmpInMask());
					dailyReport.setEmpOutAccessType(dailyReport.getEmpInAccessType());
					dailyReport.setEmpOutLocation(dailyReport.getEmpInLocation());
				}
				
				setEmployeeInPunchDetails(transaction, dailyReport, dateformat);
			}else if((null != dailyReport.getEmpOutTime() && transaction.getPunchDate().after(dateTimeformat.parse(outTimeFromDailyReport))) || (null == dailyReport.getEmpOutTime())){
				dailyReport.setEmpOutTime(transaction.getPunchTimeStr());
				dailyReport.setEmpOutTemp(transaction.getTemperature());
				dailyReport.setEmpOutMask(transaction.getWearingMask());
				dailyReport.setEmpOutAccessType(transaction.getAccessType());
				dailyReport.setEmpOutLocation(transaction.getDeviceName());
			}
			
		} catch (ParseException e) {
			e.printStackTrace();
		}

		dailyReport.setMissedOutPunch(false);

		LocalTime shiftIn = LocalTime.parse(dailyReport.getShiftInTime());
		LocalTime shiftOut = LocalTime.parse(dailyReport.getShiftOutTime());
		LocalTime empIn = LocalTime.parse(dailyReport.getEmpInTime());
		LocalTime empOut = LocalTime.parse(dailyReport.getEmpOutTime());

		Long shiftMinutes = shiftIn.until(shiftOut, ChronoUnit.MINUTES);
		
		if("3rd Shift".equalsIgnoreCase(dailyReport.getShift()))
			shiftMinutes =480l;

		Long workHours = empIn.until(empOut, ChronoUnit.HOURS);
		Long workMinutes = empIn.until(empOut, ChronoUnit.MINUTES);
		
		if(workHours<0) {
			workHours = 24 + workHours;
			workMinutes = 60 + workMinutes;
		}
		

		dailyReport.setWorkTime(String.valueOf(workHours) + ":" + String.valueOf(workMinutes % 60));
		
		if("3rd Shift".equalsIgnoreCase(dailyReport.getShift()) && workHours>2) {
			Long tillMidNight=empIn.until(LocalTime.parse("23:59:59"), ChronoUnit.MINUTES);
			Long afterMidNight=LocalTime.parse("00:00:00").until(empOut, ChronoUnit.MINUTES);
			workMinutes =tillMidNight+afterMidNight;
			dailyReport.setWorkTime(String.valueOf(workMinutes/60) + ":" + String.valueOf(workMinutes % 60));
		}
		
		

		Long overTime = workMinutes - shiftMinutes;
		Long earlyGoing =0l;
		Long lateGoing =0l;
		if("3rd Shift".equalsIgnoreCase(dailyReport.getShift()) && workHours<2) {
			 earlyGoing = empOut.until(LocalTime.parse("23:59:59"), ChronoUnit.MINUTES)+360l;
		}else {
			 lateGoing = shiftOut.until(empOut, ChronoUnit.MINUTES);
			 earlyGoing = empOut.until(shiftOut, ChronoUnit.MINUTES);
		}
		
		if (lateGoing > 0)
			dailyReport.setLateGoing(lateGoing);
		else
			dailyReport.setLateGoing(null);

		if (earlyGoing > 0) {
			dailyReport.setEarlyGoing(earlyGoing);
		} else {
			dailyReport.setEarlyGoing(null);
		}

		if (overTime > 0) {
			dailyReport.setOverTime(overTime);
			dailyReport.setOverTimeStr(overTime/60+":"+(overTime % 60));
		}
	}
}